name: Fetch YouTube Playlist

on:
  workflow_dispatch:  # Allows manual execution

permissions: 
  contents: write

jobs:
  fetch-playlist:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch YouTube Playlist Data
        run: |
          curl --location 'https://www.googleapis.com/youtube/v3/playlistItems?key=${{ secrets.YOUTUBE_API_KEY }}&playlistId=${{ secrets.YOUTUBE_PLAYLIST_ID }}&maxResults=50&part=contentDetails&part=snippet' \
          -o playlist.json
          
      - name: Print Response (Debugging)
        run: cat playlist.json

      - name: Commit & Push Results
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add playlist.json
          git commit -m "Updated YouTube Playlist Data" || echo "No changes to commit"
          git push

      - name: Extract Video Data
        run: |
          jq -c '.items[] | {
              identifier: .snippet.resourceId.videoId,
              title: .snippet.title,
              properties: {
                playlist_name: .snippet.channelTitle,
                published_at: .snippet.publishedAt,
                video_title: .snippet.title,
                video_id: .snippet.resourceId.videoId
              },
              relations: {}
          }' playlist.json > videos.json

      - name: Verify and Debug videos.json
        run: |
          if [ -f videos.json ]; then
            echo "videos.json exists."
            echo "File size:"
            ls -lh videos.json
            echo "Preview (first 5 lines):"
            head -n 5 videos.json
            echo "Number of entries:"
            jq '. | length' videos.json
            echo "Validating JSON format..."
            jq empty videos.json && echo "JSON is valid." || echo "Error: JSON is invalid!"
          else
            echo "Error: videos.json was not created!"
            exit 1
          fi

      - name: Debugging Show videos.json before sending
        run: |
         echo "Sending this data to Port:"
         cat videos.json
         echo "Number of entries in videos.json:"
         jq '. | length' videos.json
      
      - name: Push to Port.io
        run: |
          while read -r video; do
            curl -X POST "https://api.getport.io/v1/blueprints/youtube/entities" \
              -H "Authorization: Bearer ${{ secrets.PORT_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "$video"
          done < videos.json
